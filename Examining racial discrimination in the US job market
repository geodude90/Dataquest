{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Examining racial discrimination in the US job market\n",
    "\n",
    "#### Background\n",
    "Racial discrimination continues to be pervasive in cultures throughout the world. Researchers examined the level of racial discrimination in the United States labor market by randomly assigning identical résumés black-sounding or white-sounding names and observing the impact on requests for interviews from employers.\n",
    "\n",
    "#### Data\n",
    "In the dataset provided, each row represents a resume. The 'race' column has two values, 'b' and 'w', indicating black-sounding and white-sounding. The column 'call' has two values, 1 and 0, indicating whether the resume received a call from employers or not.\n",
    "\n",
    "Note that the 'b' and 'w' values in race are assigned randomly to the resumes.\n",
    "\n",
    "#### Exercise\n",
    "Perform a statistical analysis to establish whether race has a significant impact on the rate of callbacks for resumes.\n",
    "\n",
    "\n",
    "#### Resources\n",
    "+ Experiment information and data source: http://www.povertyactionlab.org/evaluation/discrimination-job-market-united-states\n",
    "+ Scipy statistical methods: http://docs.scipy.org/doc/scipy/reference/stats.html "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from scipy import stats\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.io.stata.read_stata(r\"C:\\Users\\yi6\\Desktop\\EDA_racial_discrimination\\data\\us_job_market_discrimination.dta\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "157.0"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of callbacks for balck-sounding names\n",
    "sum(data[data.race=='b'].call)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "****\n",
    "\n",
    "# Exercise\n",
    "\n",
    "   1. What test is appropriate for this problem? Does CLT apply?\n",
    "   2. What are the null and alternate hypotheses?\n",
    "   3. Compute margin of error, confidence interval, and p-value.\n",
    "   4. Discuss statistical significance.\n",
    "    \n",
    "You can include written notes in notebook cells using Markdown: \n",
    "   - In the control panel at the top, choose Cell > Cell Type > Markdown\n",
    "   - Markdown syntax: http://nestacms.com/docs/creating-content/markdown-cheat-sheet\n",
    "   \n",
    "****"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  id ad  education  ofjobs  yearsexp  honors  volunteer  military  empholes  \\\n",
      "0  b  1          4       2         6       0          0         0         1   \n",
      "1  b  1          3       3         6       0          1         1         0   \n",
      "2  b  1          4       1         6       0          0         0         0   \n",
      "3  b  1          3       4         6       0          1         0         1   \n",
      "4  b  1          3       3        22       0          0         0         0   \n",
      "\n",
      "   occupspecific    ...      compreq  orgreq  manuf  transcom  bankreal trade  \\\n",
      "0             17    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
      "1            316    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
      "2             19    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
      "3            313    ...          1.0     0.0    1.0       0.0       0.0   0.0   \n",
      "4            313    ...          1.0     1.0    0.0       0.0       0.0   0.0   \n",
      "\n",
      "  busservice othservice  missind  ownership  \n",
      "0        0.0        0.0      0.0             \n",
      "1        0.0        0.0      0.0             \n",
      "2        0.0        0.0      0.0             \n",
      "3        0.0        0.0      0.0             \n",
      "4        0.0        1.0      0.0  Nonprofit  \n",
      "\n",
      "[5 rows x 65 columns]\n",
      "Index(['id', 'ad', 'education', 'ofjobs', 'yearsexp', 'honors', 'volunteer',\n",
      "       'military', 'empholes', 'occupspecific', 'occupbroad', 'workinschool',\n",
      "       'email', 'computerskills', 'specialskills', 'firstname', 'sex', 'race',\n",
      "       'h', 'l', 'call', 'city', 'kind', 'adid', 'fracblack', 'fracwhite',\n",
      "       'lmedhhinc', 'fracdropout', 'fraccolp', 'linc', 'col', 'expminreq',\n",
      "       'schoolreq', 'eoe', 'parent_sales', 'parent_emp', 'branch_sales',\n",
      "       'branch_emp', 'fed', 'fracblack_empzip', 'fracwhite_empzip',\n",
      "       'lmedhhinc_empzip', 'fracdropout_empzip', 'fraccolp_empzip',\n",
      "       'linc_empzip', 'manager', 'supervisor', 'secretary', 'offsupport',\n",
      "       'salesrep', 'retailsales', 'req', 'expreq', 'comreq', 'educreq',\n",
      "       'compreq', 'orgreq', 'manuf', 'transcom', 'bankreal', 'trade',\n",
      "       'busservice', 'othservice', 'missind', 'ownership'],\n",
      "      dtype='object')\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 4870 entries, 0 to 4869\n",
      "Data columns (total 65 columns):\n",
      "id                    4870 non-null object\n",
      "ad                    4870 non-null object\n",
      "education             4870 non-null int8\n",
      "ofjobs                4870 non-null int8\n",
      "yearsexp              4870 non-null int8\n",
      "honors                4870 non-null int8\n",
      "volunteer             4870 non-null int8\n",
      "military              4870 non-null int8\n",
      "empholes              4870 non-null int8\n",
      "occupspecific         4870 non-null int16\n",
      "occupbroad            4870 non-null int8\n",
      "workinschool          4870 non-null int8\n",
      "email                 4870 non-null int8\n",
      "computerskills        4870 non-null int8\n",
      "specialskills         4870 non-null int8\n",
      "firstname             4870 non-null object\n",
      "sex                   4870 non-null object\n",
      "race                  4870 non-null object\n",
      "h                     4870 non-null float32\n",
      "l                     4870 non-null float32\n",
      "call                  4870 non-null float32\n",
      "city                  4870 non-null object\n",
      "kind                  4870 non-null object\n",
      "adid                  4870 non-null float32\n",
      "fracblack             4784 non-null float32\n",
      "fracwhite             4784 non-null float32\n",
      "lmedhhinc             4784 non-null float32\n",
      "fracdropout           4784 non-null float32\n",
      "fraccolp              4784 non-null float32\n",
      "linc                  4784 non-null float32\n",
      "col                   4870 non-null float32\n",
      "expminreq             4870 non-null object\n",
      "schoolreq             4870 non-null object\n",
      "eoe                   4870 non-null float32\n",
      "parent_sales          1672 non-null float32\n",
      "parent_emp            1722 non-null float32\n",
      "branch_sales          608 non-null float32\n",
      "branch_emp            658 non-null float32\n",
      "fed                   3102 non-null float32\n",
      "fracblack_empzip      1918 non-null float32\n",
      "fracwhite_empzip      1918 non-null float32\n",
      "lmedhhinc_empzip      1908 non-null float32\n",
      "fracdropout_empzip    1918 non-null float32\n",
      "fraccolp_empzip       1918 non-null float32\n",
      "linc_empzip           1918 non-null float32\n",
      "manager               4870 non-null float32\n",
      "supervisor            4870 non-null float32\n",
      "secretary             4870 non-null float32\n",
      "offsupport            4870 non-null float32\n",
      "salesrep              4870 non-null float32\n",
      "retailsales           4870 non-null float32\n",
      "req                   4870 non-null float32\n",
      "expreq                4870 non-null float32\n",
      "comreq                4870 non-null float32\n",
      "educreq               4870 non-null float32\n",
      "compreq               4870 non-null float32\n",
      "orgreq                4870 non-null float32\n",
      "manuf                 4870 non-null float32\n",
      "transcom              4870 non-null float32\n",
      "bankreal              4870 non-null float32\n",
      "trade                 4870 non-null float32\n",
      "busservice            4870 non-null float32\n",
      "othservice            4870 non-null float32\n",
      "missind               4870 non-null float32\n",
      "ownership             4870 non-null object\n",
      "dtypes: float32(42), int16(1), int8(12), object(10)\n",
      "memory usage: 1.3+ MB\n",
      "None\n",
      "         education       ofjobs     yearsexp       honors    volunteer  \\\n",
      "count  4870.000000  4870.000000  4870.000000  4870.000000  4870.000000   \n",
      "mean      3.618480     3.661396     7.842916     0.052772     0.411499   \n",
      "std       0.714997     1.219126     5.044612     0.223601     0.492156   \n",
      "min       0.000000     1.000000     1.000000     0.000000     0.000000   \n",
      "25%       3.000000     3.000000     5.000000     0.000000     0.000000   \n",
      "50%       4.000000     4.000000     6.000000     0.000000     0.000000   \n",
      "75%       4.000000     4.000000     9.000000     0.000000     1.000000   \n",
      "max       4.000000     7.000000    44.000000     1.000000     1.000000   \n",
      "\n",
      "          military     empholes  occupspecific   occupbroad  workinschool  \\\n",
      "count  4870.000000  4870.000000    4870.000000  4870.000000   4870.000000   \n",
      "mean      0.097125     0.448049     215.637782     3.481520      0.559548   \n",
      "std       0.296159     0.497345     148.127551     2.038036      0.496492   \n",
      "min       0.000000     0.000000       7.000000     1.000000      0.000000   \n",
      "25%       0.000000     0.000000      27.000000     1.000000      0.000000   \n",
      "50%       0.000000     0.000000     267.000000     4.000000      1.000000   \n",
      "75%       0.000000     1.000000     313.000000     6.000000      1.000000   \n",
      "max       1.000000     1.000000     903.000000     6.000000      1.000000   \n",
      "\n",
      "          ...           educreq      compreq       orgreq        manuf  \\\n",
      "count     ...       4870.000000  4870.000000  4870.000000  4870.000000   \n",
      "mean      ...          0.106776     0.437166     0.072690     0.082957   \n",
      "std       ...          0.308866     0.496083     0.259649     0.275854   \n",
      "min       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "25%       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "50%       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "75%       ...          0.000000     1.000000     0.000000     0.000000   \n",
      "max       ...          1.000000     1.000000     1.000000     1.000000   \n",
      "\n",
      "          transcom     bankreal        trade   busservice   othservice  \\\n",
      "count  4870.000000  4870.000000  4870.000000  4870.000000  4870.000000   \n",
      "mean      0.030390     0.085010     0.213963     0.267762     0.154825   \n",
      "std       0.171677     0.278932     0.410141     0.442847     0.361773   \n",
      "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "25%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "50%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "75%       0.000000     0.000000     0.000000     1.000000     0.000000   \n",
      "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
      "\n",
      "           missind  \n",
      "count  4870.000000  \n",
      "mean      0.165092  \n",
      "std       0.371308  \n",
      "min       0.000000  \n",
      "25%       0.000000  \n",
      "50%       0.000000  \n",
      "75%       0.000000  \n",
      "max       1.000000  \n",
      "\n",
      "[8 rows x 55 columns]\n"
     ]
    }
   ],
   "source": [
    "print(data.head())\n",
    "print(data.columns)\n",
    "print(data.info())\n",
    "print(data.describe())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Question 1\n",
    "\n",
    "CLT should apply because the features are random and independent. There is some question whether the companies that self-selected to respond are actually random. For instance, it could be the case that a disproportinate number of resumes labled non-white were sent to geographically concentrated racially predjudiced employers\n",
    "\n",
    "A permutation test for mean difference is appropriate. In this scenario, the race label is randomly applied a number of times and the mean test statistic is calculated. The observed statistic can then be compared to a critical threshold.\n",
    "\n",
    "# Question 2\n",
    "Null Hypothesis: Mean difference of callbacks is equal between races \n",
    "Alternate Hypothesis: The observed difference in means is < 2.5% or >97.5% of permuted mean differences"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#Permutation (null hypothesis: distributions are same)\n",
    "def draw_perm_reps(df, column, df1, func, size = 1 ):\n",
    "    perm_reps = np.empty(size)\n",
    "    for i in range(size):\n",
    "        x,y = permutation_sample(df,column,df1)\n",
    "        perm_reps[i] = func(x,y)\n",
    "    return perm_reps\n",
    "\n",
    "def permutation_sample(df, column, df1):\n",
    "    permuted_data = np.random.permutation(df[column])\n",
    "    perm_sample_1 = permuted_data[:len(df1)]\n",
    "    perm_sample_2 = permuted_data[len(df1):]\n",
    "    return perm_sample_1, perm_sample_2\n",
    "\n",
    "def mean_diff(data1, data2):\n",
    "    difference = np.mean(data1) - np.mean(data2)\n",
    "    return difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         education       ofjobs     yearsexp       honors    volunteer  \\\n",
      "count  2435.000000  2435.000000  2435.000000  2435.000000  2435.000000   \n",
      "mean      3.616016     3.658316     7.829569     0.051335     0.414374   \n",
      "std       0.733060     1.219150     5.010764     0.220725     0.492715   \n",
      "min       0.000000     1.000000     1.000000     0.000000     0.000000   \n",
      "25%       3.000000     3.000000     5.000000     0.000000     0.000000   \n",
      "50%       4.000000     4.000000     6.000000     0.000000     0.000000   \n",
      "75%       4.000000     4.000000     9.000000     0.000000     1.000000   \n",
      "max       4.000000     7.000000    44.000000     1.000000     1.000000   \n",
      "\n",
      "          military     empholes  occupspecific   occupbroad  workinschool  \\\n",
      "count  2435.000000  2435.000000    2435.000000  2435.000000   2435.000000   \n",
      "mean      0.101848     0.445996     216.744969     3.487885      0.560986   \n",
      "std       0.302511     0.497177     148.021857     2.043125      0.496369   \n",
      "min       0.000000     0.000000       7.000000     1.000000      0.000000   \n",
      "25%       0.000000     0.000000      27.000000     1.000000      0.000000   \n",
      "50%       0.000000     0.000000     267.000000     4.000000      1.000000   \n",
      "75%       0.000000     1.000000     313.000000     6.000000      1.000000   \n",
      "max       1.000000     1.000000     903.000000     6.000000      1.000000   \n",
      "\n",
      "          ...           educreq      compreq       orgreq        manuf  \\\n",
      "count     ...       2435.000000  2435.000000  2435.000000  2435.000000   \n",
      "mean      ...          0.106776     0.437372     0.072690     0.082957   \n",
      "std       ...          0.308889     0.496160     0.259681     0.275874   \n",
      "min       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "25%       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "50%       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "75%       ...          0.000000     1.000000     0.000000     0.000000   \n",
      "max       ...          1.000000     1.000000     1.000000     1.000000   \n",
      "\n",
      "          transcom     bankreal        trade   busservice   othservice  \\\n",
      "count  2435.000000  2435.000000  2435.000000  2435.000000  2435.000000   \n",
      "mean      0.030390     0.085010     0.213963     0.267762     0.154825   \n",
      "std       0.171693     0.278955     0.410183     0.442879     0.361809   \n",
      "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "25%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "50%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "75%       0.000000     0.000000     0.000000     1.000000     0.000000   \n",
      "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
      "\n",
      "           missind  \n",
      "count  2435.000000  \n",
      "mean      0.165092  \n",
      "std       0.371337  \n",
      "min       0.000000  \n",
      "25%       0.000000  \n",
      "50%       0.000000  \n",
      "75%       0.000000  \n",
      "max       1.000000  \n",
      "\n",
      "[8 rows x 55 columns]\n",
      "         education       ofjobs     yearsexp       honors    volunteer  \\\n",
      "count  2435.000000  2435.000000  2435.000000  2435.000000  2435.000000   \n",
      "mean      3.620945     3.664476     7.856263     0.054209     0.408624   \n",
      "std       0.696609     1.219345     5.079228     0.226477     0.491681   \n",
      "min       0.000000     1.000000     1.000000     0.000000     0.000000   \n",
      "25%       3.000000     3.000000     5.000000     0.000000     0.000000   \n",
      "50%       4.000000     4.000000     6.000000     0.000000     0.000000   \n",
      "75%       4.000000     4.000000     9.000000     0.000000     1.000000   \n",
      "max       4.000000     7.000000    26.000000     1.000000     1.000000   \n",
      "\n",
      "          military     empholes  occupspecific   occupbroad  workinschool  \\\n",
      "count  2435.000000  2435.000000    2435.000000  2435.000000   2435.000000   \n",
      "mean      0.092402     0.450103     214.530595     3.475154      0.558111   \n",
      "std       0.289653     0.497606     148.255302     2.033334      0.496714   \n",
      "min       0.000000     0.000000       7.000000     1.000000      0.000000   \n",
      "25%       0.000000     0.000000      27.000000     1.000000      0.000000   \n",
      "50%       0.000000     0.000000     267.000000     4.000000      1.000000   \n",
      "75%       0.000000     1.000000     313.000000     6.000000      1.000000   \n",
      "max       1.000000     1.000000     903.000000     6.000000      1.000000   \n",
      "\n",
      "          ...           educreq      compreq       orgreq        manuf  \\\n",
      "count     ...       2435.000000  2435.000000  2435.000000  2435.000000   \n",
      "mean      ...          0.106776     0.436961     0.072690     0.082957   \n",
      "std       ...          0.308889     0.496116     0.259681     0.275874   \n",
      "min       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "25%       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "50%       ...          0.000000     0.000000     0.000000     0.000000   \n",
      "75%       ...          0.000000     1.000000     0.000000     0.000000   \n",
      "max       ...          1.000000     1.000000     1.000000     1.000000   \n",
      "\n",
      "          transcom     bankreal        trade   busservice   othservice  \\\n",
      "count  2435.000000  2435.000000  2435.000000  2435.000000  2435.000000   \n",
      "mean      0.030390     0.085010     0.213963     0.267762     0.154825   \n",
      "std       0.171693     0.278955     0.410183     0.442879     0.361809   \n",
      "min       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "25%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "50%       0.000000     0.000000     0.000000     0.000000     0.000000   \n",
      "75%       0.000000     0.000000     0.000000     1.000000     0.000000   \n",
      "max       1.000000     1.000000     1.000000     1.000000     1.000000   \n",
      "\n",
      "           missind  \n",
      "count  2435.000000  \n",
      "mean      0.165092  \n",
      "std       0.371337  \n",
      "min       0.000000  \n",
      "25%       0.000000  \n",
      "50%       0.000000  \n",
      "75%       0.000000  \n",
      "max       1.000000  \n",
      "\n",
      "[8 rows x 55 columns]\n"
     ]
    }
   ],
   "source": [
    "black = data[data[\"race\"]== \"b\"]\n",
    "white = data[data[\"race\"] == \"w\"]\n",
    "print(black.describe())\n",
    "print(white.describe())\n",
    "\n",
    "             "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nGAAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x26567dcb6d8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Margin of Error: 0.0152819123109\n",
      "experimental difference: -0.03203285485506058\n",
      "pval: 0.0\n",
      "2.5% and 97.5% confidence intervals -0.0147843882442   0.0156057551503\n",
      "\n"
     ]
    }
   ],
   "source": [
    "exp_dif = mean_diff(black[\"call\"], white[\"call\"])\n",
    "perm_dif = draw_perm_reps(data, \"call\",black, mean_diff, size = 5000)\n",
    "pval = np.sum(perm_dif <= exp_dif)/len(perm_dif)\n",
    "\n",
    "##from solution... not sure how to compute this statistic from a permutation test\n",
    "phat = (np.sum(black.call) + np.sum(white.call)) / (len(white) + len(black))\n",
    "moe = 1.96 * np.sqrt(phat * (1 - phat) * ((1 / len(white)) + (1 / len(black))))\n",
    "\n",
    "#permutation hist\n",
    "_ = plt.hist(perm_dif, bins = 500)\n",
    "_ = plt.xlabel(\"call back difference\")\n",
    "_ = plt.ylabel(\"frequency\")\n",
    "_ = plt.axvline(exp_dif, color = 'red', linestyle = 'dashed', linewidth = 2)\n",
    "plt.show()\n",
    "\n",
    "#statistics\n",
    "print(\"Margin of Error:\", moe)\n",
    "print(\"experimental difference:\", exp_dif)\n",
    "print(\"pval:\", pval)\n",
    "print(\"2.5% and 97.5% confidence intervals\",np.percentile(perm_dif, 2.5), \" \", np.percentile(perm_dif, 97.5))\n",
    "print()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Questions 3 & 4\n",
    "\n",
    "Out of 5000 permutation tests, no difference in means was as great as the observed statistic (P value = 0). The difference in means was well within the 5% threshold, so the null hypothesis can be rejected. A cursory glance of the data indicates that the difference in work experience etc. of the data labeled black and white is minimal (ex. 7.83 years for \"black\" and 7.86 for \"white\"). Note that a similar test could be conducted to verify that these variables are not statistically different. It would be interesting to run the experiment for gender and race to see if the means are statistically different for each of these categories as well.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
